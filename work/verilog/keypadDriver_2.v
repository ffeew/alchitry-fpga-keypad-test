/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module keypadDriver_2 (
    input clk,
    input rst,
    input [3:0] in_col,
    output reg [3:0] out_row,
    output reg button_0,
    output reg button_1,
    output reg button_2,
    output reg button_3,
    output reg button_4,
    output reg button_5,
    output reg button_6,
    output reg button_7,
    output reg button_8,
    output reg button_9,
    output reg button_a,
    output reg button_b,
    output reg button_c,
    output reg button_d,
    output reg button_asterisk,
    output reg button_hash
  );
  
  
  
  localparam INPUT_state = 3'd0;
  localparam SCAN_ROW1_state = 3'd1;
  localparam SCAN_ROW2_state = 3'd2;
  localparam SCAN_ROW3_state = 3'd3;
  localparam SCAN_ROW4_state = 3'd4;
  
  reg [2:0] M_state_d, M_state_q = INPUT_state;
  reg [3:0] M_col_d, M_col_q = 1'h0;
  reg [3:0] M_row_d, M_row_q = 1'h0;
  
  always @* begin
    M_state_d = M_state_q;
    M_col_d = M_col_q;
    M_row_d = M_row_q;
    
    button_1 = M_col_q[0+0-:1] & M_row_q[0+0-:1];
    button_2 = M_col_q[1+0-:1] & M_row_q[0+0-:1];
    button_3 = M_col_q[2+0-:1] & M_row_q[0+0-:1];
    button_a = M_col_q[3+0-:1] & M_row_q[0+0-:1];
    button_4 = M_col_q[0+0-:1] & M_row_q[1+0-:1];
    button_5 = M_col_q[1+0-:1] & M_row_q[1+0-:1];
    button_6 = M_col_q[2+0-:1] & M_row_q[1+0-:1];
    button_b = M_col_q[3+0-:1] & M_row_q[1+0-:1];
    button_7 = M_col_q[0+0-:1] & M_row_q[2+0-:1];
    button_8 = M_col_q[1+0-:1] & M_row_q[2+0-:1];
    button_9 = M_col_q[2+0-:1] & M_row_q[2+0-:1];
    button_c = M_col_q[3+0-:1] & M_row_q[2+0-:1];
    button_asterisk = M_col_q[0+0-:1] & M_row_q[3+0-:1];
    button_0 = M_col_q[1+0-:1] & M_row_q[3+0-:1];
    button_hash = M_col_q[2+0-:1] & M_row_q[3+0-:1];
    button_d = M_col_q[3+0-:1] & M_row_q[3+0-:1];
    out_row = 4'h0;
    
    case (M_state_q)
      INPUT_state: begin
        out_row = 4'hf;
        M_row_d = 4'h0;
        M_col_d = 4'h0;
        if ((|in_col)) begin
          if (in_col[0+0-:1] == 1'h1) begin
            M_col_d = 4'h1;
          end else begin
            if (in_col[1+0-:1] == 1'h1) begin
              M_col_d = 4'h2;
            end else begin
              if (in_col[2+0-:1] == 1'h1) begin
                M_col_d = 4'h4;
              end else begin
                if (in_col[3+0-:1] == 1'h1) begin
                  M_col_d = 4'h8;
                end else begin
                  button_1 = 1'h1;
                  button_2 = 1'h1;
                  button_3 = 1'h1;
                  button_4 = 1'h1;
                end
              end
            end
          end
          M_state_d = SCAN_ROW1_state;
        end
      end
      SCAN_ROW1_state: begin
        out_row = 4'h1;
        if ((|in_col)) begin
          M_row_d = 4'h1;
          M_state_d = INPUT_state;
        end else begin
          M_state_d = SCAN_ROW2_state;
        end
      end
      SCAN_ROW2_state: begin
        out_row = 4'h2;
        if ((|in_col)) begin
          M_row_d = 4'h2;
          M_state_d = INPUT_state;
        end else begin
          M_state_d = SCAN_ROW3_state;
        end
      end
      SCAN_ROW3_state: begin
        out_row = 4'h4;
        if ((|in_col)) begin
          M_row_d = 4'h4;
          M_state_d = INPUT_state;
        end else begin
          M_state_d = SCAN_ROW4_state;
        end
      end
      SCAN_ROW4_state: begin
        out_row = 4'h8;
        if ((|in_col)) begin
          M_row_d = 4'h8;
          M_state_d = INPUT_state;
        end else begin
          M_state_d = SCAN_ROW1_state;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_col_q <= 1'h0;
      M_row_q <= 1'h0;
      M_state_q <= 1'h0;
    end else begin
      M_col_q <= M_col_d;
      M_row_q <= M_row_d;
      M_state_q <= M_state_d;
    end
  end
  
endmodule
