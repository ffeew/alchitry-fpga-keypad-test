/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module keypadDriver_5 (
    input clk,
    input rst,
    input [3:0] in_col,
    output reg [3:0] out_row,
    output reg [3:0] out_col,
    output reg button_0,
    output reg button_1,
    output reg button_2,
    output reg button_3,
    output reg button_4,
    output reg button_5,
    output reg button_6,
    output reg button_7,
    output reg button_8,
    output reg button_9,
    output reg button_a,
    output reg button_b,
    output reg button_c,
    output reg button_d,
    output reg button_asterisk,
    output reg button_hash
  );
  
  
  
  localparam DETECT_COL_driver = 4'd0;
  localparam DETECT_ROW1_PT1_driver = 4'd1;
  localparam DETECT_ROW1_PT2_driver = 4'd2;
  localparam DETECT_ROW2_PT1_driver = 4'd3;
  localparam DETECT_ROW2_PT2_driver = 4'd4;
  localparam DETECT_ROW3_PT1_driver = 4'd5;
  localparam DETECT_ROW3_PT2_driver = 4'd6;
  localparam DETECT_ROW4_PT1_driver = 4'd7;
  localparam DETECT_ROW4_PT2_driver = 4'd8;
  
  reg [3:0] M_driver_d, M_driver_q = DETECT_COL_driver;
  reg [3:0] M_in_col_dff_d, M_in_col_dff_q = 1'h0;
  
  always @* begin
    M_driver_d = M_driver_q;
    M_in_col_dff_d = M_in_col_dff_q;
    
    button_0 = 1'h0;
    button_1 = 1'h0;
    button_2 = 1'h0;
    button_3 = 1'h0;
    button_4 = 1'h0;
    button_5 = 1'h0;
    button_6 = 1'h0;
    button_7 = 1'h0;
    button_8 = 1'h0;
    button_9 = 1'h0;
    button_a = 1'h0;
    button_b = 1'h0;
    button_c = 1'h0;
    button_d = 1'h0;
    button_asterisk = 1'h0;
    button_hash = 1'h0;
    M_in_col_dff_d = in_col;
    out_col = M_in_col_dff_q;
    
    case (M_driver_q)
      DETECT_COL_driver: begin
        out_row = 4'hf;
        if ((|M_in_col_dff_q)) begin
          M_driver_d = DETECT_ROW1_PT1_driver;
        end
      end
      DETECT_ROW1_PT1_driver: begin
        out_row = 4'h8;
        M_in_col_dff_d = in_col;
        M_driver_d = DETECT_ROW1_PT2_driver;
      end
      DETECT_ROW1_PT2_driver: begin
        out_row = 4'h8;
        if ((|M_in_col_dff_q)) begin
          button_1 = M_in_col_dff_q[3+0-:1];
          button_2 = M_in_col_dff_q[2+0-:1];
          button_3 = M_in_col_dff_q[1+0-:1];
          button_a = M_in_col_dff_q[0+0-:1];
          M_driver_d = DETECT_COL_driver;
        end else begin
          M_driver_d = DETECT_ROW2_PT1_driver;
        end
      end
      DETECT_ROW2_PT1_driver: begin
        out_row = 4'h4;
        M_in_col_dff_d = in_col;
        M_driver_d = DETECT_ROW2_PT2_driver;
      end
      DETECT_ROW2_PT2_driver: begin
        out_row = 4'h4;
        if ((|M_in_col_dff_q)) begin
          button_4 = M_in_col_dff_q[3+0-:1];
          button_5 = M_in_col_dff_q[2+0-:1];
          button_6 = M_in_col_dff_q[1+0-:1];
          button_b = M_in_col_dff_q[0+0-:1];
          M_driver_d = DETECT_COL_driver;
        end else begin
          M_driver_d = DETECT_ROW3_PT1_driver;
        end
      end
      DETECT_ROW3_PT1_driver: begin
        out_row = 4'h2;
        M_in_col_dff_d = in_col;
        M_driver_d = DETECT_ROW3_PT2_driver;
      end
      DETECT_ROW3_PT2_driver: begin
        out_row = 4'h2;
        if ((|M_in_col_dff_q)) begin
          button_7 = M_in_col_dff_q[3+0-:1];
          button_8 = M_in_col_dff_q[2+0-:1];
          button_9 = M_in_col_dff_q[1+0-:1];
          button_c = M_in_col_dff_q[0+0-:1];
          M_driver_d = DETECT_COL_driver;
        end else begin
          M_driver_d = DETECT_ROW4_PT1_driver;
        end
      end
      DETECT_ROW4_PT1_driver: begin
        out_row = 4'h1;
        M_in_col_dff_d = in_col;
        M_driver_d = DETECT_ROW4_PT2_driver;
      end
      DETECT_ROW4_PT2_driver: begin
        out_row = 4'h1;
        button_asterisk = M_in_col_dff_q[3+0-:1];
        button_0 = M_in_col_dff_q[2+0-:1];
        button_hash = M_in_col_dff_q[1+0-:1];
        button_d = M_in_col_dff_q[0+0-:1];
        M_driver_d = DETECT_COL_driver;
      end
      default: begin
        out_row = 4'h0;
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_in_col_dff_q <= 1'h0;
      M_driver_q <= 1'h0;
    end else begin
      M_in_col_dff_q <= M_in_col_dff_d;
      M_driver_q <= M_driver_d;
    end
  end
  
endmodule
